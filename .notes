// ### TO-DO:

// # AUTH FLOW / SPOTDAWG LIFE CYCLE
// - user adds spotdawg to channel
// - user (or spotdawg?) initiates conversation, directs user to something like "/signup"
// - user makes an account using Slack-Passport (SD keeps username, pw, slack team id, etc)
//   - only slack oauth accounts are allowed since all users must be slack users by default.
//   - if so, how to reconcile one user with many slack accounts? local first, authorize slack, then authorize spotify for that slack?
// - on success, directs user to Spotify's OAUTH flow (add Spotify account info to the user's record)

// # BOT API
// - Slack's tutorial on making a sentiment bot has a decent walkthrough of how to handle a bot

// # SPOTIFY API
// - keep tracks unique in playlist (don't add the same one multiple times)
// - update scope
// - utilize refresh token

// # SLACK API
// - send responses and prompts from SD to Slack
// - is middleware appropriate for respond to challenge requests?

// # DATABASE
// X make the database with mlab
// - one SD user with many teams

// # BUGS 'N' STUFF
// - look into handling errors in middleware
// X middleware is called multiple times per request
//   X posibly because slack "unfolds" links like spotify links to be mini-players
// - clean up views/public

// # USER STORY:
// - user shares spotify link in chat, Spotdawg adds it to Spotify playlist
//   - Slack sends request to Spotdawg
//   - middleware: is authorized? (is from Slack)
//   - middleware: is challenge request?
//   - bot parses message, determines what to do
//     - ignore if track is duplicate (Spotify setting? keep tracks in SD DB?)
//   - sends request to Spotify: add track id XXX to playlist XXX of user XXX
//     - track: from message, playlist and user: from DB
//   - SD responds via Slack API
//     - debounced so it sends a bulk update of # of successful adds in the past X amount of time
//     - sends individual errors ('could not add track XXX')

// # IDEAS
// - CLI-esque search and play in chat (update spotify scope)
// - supports admin roles
// - supports multiple playlists
//   - CLI-esque playlist management in chat (upgrade dat bot chat)
// - IBM's Watson API could analyze the lyrics of songs for emotional tone, giving the channel a rating
